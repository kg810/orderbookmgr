#Solution description#

##Part A##
implement three classes in orderbook.h:
class Order - define order structure. Although problem only requires single symbol, the solution supports mutiple symbols.
class Book - define book sturcture, includes Level sturcture, and several operations.
class OrderBookMgr - define user interface, support all 5 operations in Part A problem.

test.cpp defines unit testcases to cover most of functionalities provided in orderbook.h. it's based on boost unit test framework.

Suggest build command: g++ -std=c++14 -Wall -Werror test.cpp -o utest
Run test after build: ./utest
(my local system is Ubuntu 16.04.11, and g++ version is 5.4.0)


##Part B##
in my implementation, order is stored in hash map, so performance is always O(1)
worst-case time performance
1. O(m) - worst-case is insert top of book, need to shift all levels
2. O(m) - worst-case is remove top of book, need to shift all levels
3. O(log(m)) - lookup by binary search.
4. O(1) - Book structure supports constant time lookup
5. O(1) - Book structure supports constant time lookup


##Part C##
In real world usage, we can still enhance it in below aspects:
specific to order/book:
1. limitation of levels - currently implementation, level number can increase unlimited.
2. maintain book pointer in related orders, so when we change a order, don't need to lookup correspond book.
3. Also maintain order pointers/reference in related book.
general enhancements:
1. exception protection like when new a order/book.
4. thread safe - if potentially used in multi-threads env.
5. measure performance of unordered_map, it's not cache friendly.
2. log supports.
